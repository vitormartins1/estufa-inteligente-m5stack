@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/angular.puml
!include DEVICONS/dotnet.puml
!include DEVICONS2/dot_net.puml
!include DEVICONS2/dot_net_wordmark.puml
!include DEVICONS2/dotnetcore.puml
!include DEVICONS/msql_server.puml
!include FONTAWESOME/aws.puml
!include FONTAWESOME/file_csv.puml

!define AWSPUML https://raw.githubusercontent.com/milo-minderbinder/AWS-PlantUML/master/dist
!includeurl AWSPUML/common.puml
!includeurl AWSPUML/Storage/AmazonS3/AmazonS3.puml
!includeurl AWSPUML/Storage/AmazonS3/bucket/bucket.puml
!includeurl AWSPUML/Database/AmazonDynamoDB/AmazonDynamoDB.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/topic/topic.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/thingthermostat/thingthermostat.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/thinggeneric/thinggeneric.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/thinglightbulb/thinglightbulb.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/thingutility/thingutility.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/thingwindfarm/thingwindfarm.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/thingcamera/thingcamera.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/thinghouse/thinghouse.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/shadow/shadow.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/sensor/sensor.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/rule/rule.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/lambdafunction/lambdafunction.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/MQTTprotocol/MQTTprotocol.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/hardwareboard/hardwareboard.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/alexavoiceservice/alexavoiceservice.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/alexasmarthomeskill/alexasmarthomeskill.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/alexaskill/alexaskill.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/action/action.puml
!includeurl AWSPUML/InternetOfThings/AWSIoT/AWSIoT.puml
!includeurl AWSPUML/Analytics/AmazonQuickSight/AmazonQuickSight.puml


' LAYOUT_TOP_DOWN()
 LAYOUT_AS_SKETCH()

Person(usuario, "Usuário")


Container(m5core2central, "m5core2central", "M5 Core 2", "Central de monitoramento e configuraçao dos dispositivos IoT", $sprite="thinggeneric")
Boundary(estufa, "Estufa") {
    Container(m5photoperiod, "m5photoperiod", "Atom Matrix + RTC + Switch HUB", "Dispositivo que controla o fotoperíodo e os Exaustores", $sprite="thinglightbulb")
    Container(m5envcontrol, "m5envcontrol", "Atom Lite + Switch HUB", "Dispositivo que liga e desliga o ventilador e o umidificador", $sprite="thingwindfarm")
    Container(m5env3, "m5env3", "Atom Lite + Unit Env3", "Leituras de temperatura, umidade do ar e pressão", $sprite="thingthermostat")
    ' Container(m5timercam, "m5timercam", "M5TimerCamF", $sprite="thingcamera")
}

Boundary(aws, "AWS") {
    System(dynamoDb, "Dynamo DB", $sprite="AmazonDynamoDB")
    System(iotAnalytics, "IoT Analytics", $sprite="AWSIoT")
    System(quickSight, "QuickSight", $sprite="AmazonQuickSight")

    Boundary(iotCore, "IoT Core") {
        System(topicos, "Tópicos MQTT", $sprite="topic")
        System(rule, "Rule Engine", $sprite="rule")
    }
}

Rel(usuario, m5core2central, "Configura Fotoperiodo")
Rel(usuario, m5core2central, "Liga/Desliga Exaustor")
Rel(usuario, m5core2central, "Monitora dados de ambiente")

Rel(m5core2central, topicos, "Envia nova configuração de Fotoperíodo")
BiRel(m5core2central, topicos, "Envia e recebe status de relés")
Rel(topicos, m5photoperiod, "Recebe nova configuraçao de Fotoperíodo")
BiRel(m5photoperiod, topicos, "Envia e recebe status dos relés")
''Rel(topicos, m5core2central, "Atualiza status do exaustor")
BiRel(topicos, m5envcontrol, "Envia e recebe status de relés")

Rel(m5env3, topicos, "Envia leituras do sensor de Ambiente")
Rel(topicos, m5core2central, "Recebe os dados de Ambiente mais atuais")
Rel(rule, dynamoDb, "Armazena dados usando Timestamp como chave primária")
Rel(rule, iotAnalytics, "Envia dados de telemetria para armazenamento e análise")

Rel(rule, topicos, "Republica comando de mudança de status do ventilador e umidificador")

Rel(topicos, rule, "Envia os dados de Ambiente")
Rel(topicos, rule, "Envia o status dos reles")
Rel(topicos, rule, "Envia a nova configuração de Fotoperiodo")

Rel(quickSight, iotAnalytics, "Consome dados armazenados para geração de gráficos")
' Lay_U(aws, estufa)
' Lay_R(estufa, m5core2central)

' Lay_D(topicoEnv3, topicoSwitchFotoperiodoStatus)
' Lay_D(topicoSwitchFotoperiodoStatus, topicoSwitchFotoperiodoConfiguracao)
' Lay_D(topicoSwitchFotoperiodoConfiguracao, topicoSwitchExaustor)

' Lay_D(m5photoperiod, m5env3)
' Lay_D(m5env3, m5camera)

SHOW_LEGEND()
@enduml
